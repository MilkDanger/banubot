{"version":3,"sources":["webpack:///./src/pages/flashcards/Deck.js","webpack:///./src/pages/flashcards/Card.js"],"names":["Deck","props","cards","name","me","func","changeDeck","window","scrollTo","render","className","styles","deck","onClick","this","src","alt","cardPic","deckName","Component","data","require","Card","i","length","push","state","decks","goTo","cardDiv","posDiv","isRus","flipped","sorted","all","update","bind","flip","next","switchLang","deckify","goToPos","flipdate","innerHTML","rus","eng","amt","links","key","setState","index","parseInt","value","componentDidMount","document","getElementById","type","pos","id","cardText","defaultValue","min","max","to"],"mappings":"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","file":"component---src-pages-flashcards-card-js-17452580225db25a6c19.js","sourcesContent":["import React, { Component } from \"react\"\nimport styles from \"../../components/flashcards-container.module.css\"\n\n//all the buttons that show up when you\n//hit the sort button\n//each deck will have 10 words in it just because \n//I think that's a pretty manageable amount of words\n//to learn at once\nclass Deck extends Component {\n    constructor(props) {\n        super(props); \n        //each deck component has a reference to\n        //the card component so it can tell the \n        //card comp. to change to its cards\n        this.cards = props.cards;\n        this.name = props.name;\n        var me = this;\n        //when this deck button is clicked,\n        //change cards to cards of this deck\n        this.func = function() {\n            props.cards.changeDeck(me.name);\n            window.scrollTo(0,0);\n        };\n    }\n\n    //each has a deck pic and the number\n    render() {\n        return (\n            <div className={styles.deck} onClick={this.func}>\n                <img src=\"../cards.png\" alt=\"deck\" className={styles.cardPic}/>\n                <div className={styles.deckName}>{this.name}</div>\n            </div>\n        )\n    }\n}\n\nexport default Deck; ","import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\nimport Deck from './Deck'\nimport styles from \"../../components/flashcards-container.module.css\"\n\nlet data = require('../../data/Cards.json')\n\n//The big white square with the words in it\nclass Card extends Component {\n    //give properties to react component constructor\n    constructor(props) {\n        super(props);\n        this.cards = [];\n        let i;\n        for (i=0; i < data.length; i++) {\n            this.cards.push(data[i]);\n        }\n        \n        //card text and position number text\n        //goes in div\n        this.state = {\n            decks: []\n        };\n        this.goTo = null;\n        this.cardDiv = null;\n        this.posDiv = null\n        //array of all possible cards\n        //current card index\n        this.i = 0;\n        //are we on the russian side? \n        //either bc rus side up or bc flipped\n        this.isRus = true;\n        //card was flipped\n        this.flipped = false;\n        \n        //don't sort more than once\n        this.sorted = false;\n        //storage for cards if decks\n        this.all = [];\n\n        this.update = this.update.bind(this);\n        this.flip = this.flip.bind(this);\n        this.next = this.next.bind(this);\n        this.switchLang = this.switchLang.bind(this);\n        this.deckify = this.deckify.bind(this);\n        this.goToPos = this.goToPos.bind(this);\n        this.flipdate = this.flipdate.bind(this)\n    }\n\n    //pick the rus or eng side of the card at \n    //current index and update the text\n    update() {\n        if (this.cardDiv !== null) {\n            this.cardDiv.innerHTML = this.isRus ? this.cards[this.i].rus : this.cards[this.i].eng;\n            this.posDiv.innerHTML = (this.i + 1) + \"/\" + this.cards.length;\n        }\n    }\n\n    //swap sides and update\n    flip() {\n        this.isRus = !this.isRus;\n        this.flipped = !this.flipped;\n        this.update();\n    }\n\n    //move the card index forward or back \n    next(amt) {\n        this.i = (this.i + amt) % this.cards.length;\n        //wrap around\n        if (this.i < 0) {\n            this.i = this.cards.length - 1;\n        }\n        //if you flipped over the card last time,\n        //this one shouldn't be flipped too\n        this.flipdate();\n        \n    }\n\n\n    //flip sides before updating or no\n    //for when deck or language changes\n    flipdate() {\n        if (this.flipped) {\n            this.flip()\n        } else {\n            this.update();\n        }\n    }\n\n    //take all the cars and split them into decks \n    //with 10 cards each\n    deckify() {\n        var i;\n        //save all the cards so they can be grabbed when \n        //deck changes\n        for (i = 0; i < this.cards.length; i++) {\n            this.all.push(this.cards[i]);\n        }\n        //fill array with deck components\n        var links = [];\n        for (i = 10; i < this.all.length; i+=10) {\n            links.push(<Deck name={i} key={i} cards={this}/>);\n        }\n        //go back to first deck\n        this.changeDeck(10);\n        this.setState({decks : links})\n    }\n\n    //change the card to be 10 cards from index - 10\n    //to index\n    changeDeck(index) {\n        //empty current cards\n        this.cards = [];\n        var i;\n        for (i = index - 10; i < index; i++) {\n            this.cards.push(this.all[i]);\n        }\n        this.i = 0;\n        this.flipdate();\n    }\n\n    //change all cards to be other language side up\n    switchLang() {\n        this.rus = !this.rus;\n        this.update();\n    }\n\n    goToPos() {\n        this.i = parseInt(this.goTo.value) - 1;\n        this.update();\n    }\n\n    //if this react component was made successfully\n    //then add click handlers to the card div and buttons\n    componentDidMount() {\n       this.cardDiv = document.getElementById(\"cardDiv\");\n       this.posDiv = document.getElementById(\"posText\");\n       this.decks = document.getElementById(\"decks\");\n       this.goTo = document.getElementById(\"goInput\");\n       this.update();\n    }\n\n    //this is what card and buttons should look like\n    //StaticQuery is the query to get the json info\n    render() {\n        return (\n            <div>\n                <center>\n                    <button type=\"button\" className={styles.flip} onClick={this.switchLang}>рус - анг</button>\n                    <br/>\n                    <button type=\"button\" onClick={() => this.next(-1)}>прошлая</button>\n                    <p className={styles.pos} id=\"posText\"></p>\n                    <button type=\"button\" onClick={() => this.next(1)}>следующая</button>\n                    <div className={styles.cardText} id=\"cardDiv\" onClick={this.flip}>\n                    </div>\n                    <div>\n                        <input type=\"number\" id=\"goInput\" defaultValue=\"1\" min=\"1\" max={this.cards.length}/>\n                        <button type=\"button\" onClick={this.goToPos}>давай!</button>\n                        <button type=\"button\" onClick={this.deckify}>сортировать</button>\n                        <Link to=\"/game/\">\n                            <button type=\"button\">\n                                игра\n                            </button>\n                        </Link>\n                        <br/>\n                    <div id=\"decks\">\n                        {this.state.decks}\n                    </div>\n                    </div>\n                </center>\n            </div>\n        )\n    }\n\n    // render() {\n    //     return this.state.content;\n    // }\n}\n\nexport default Card;"],"sourceRoot":""}