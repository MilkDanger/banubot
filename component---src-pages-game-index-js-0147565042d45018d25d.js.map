{"version":3,"sources":["webpack:///./src/pages/game/index.js"],"names":["data","require","Game","props","i","words","length","push","state","count","correct","answerpos","lastpos","target","choices","msg","isRus","chose","bind","switchLang","console","log","this","setState","render","className","styles","flashbod","id","score","type","flip","onClick","choice","componentDidMount","targ","ans","card","rand","rus","eng","Component","max","Math","floor","random"],"mappings":"kSAIA,IAAIA,EAAOC,EAAQ,QAEbC,E,oBACF,WAAYC,GAAQ,IAAD,EAGXC,EACJ,KAHA,cAAMD,IAAN,MACKE,MAAQ,GAERD,EAAE,EAAGA,EAAIJ,EAAKM,OAAQF,IACvB,EAAKC,MAAME,KAAKP,EAAKI,IALV,OASf,EAAKI,MAAQ,CACTC,OAAS,EACTC,QAAU,EACVC,UAAY,EACZC,QAAU,EACVC,OAAS,GACTC,QAAU,CAAC,IAAI,IAAI,IAAI,KACvBC,IAAM,GACNC,OAAQ,GAEZ,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,MACb,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,MApBH,E,kHAuBnBC,WAAA,WACIC,QAAQC,IAAI,QACZD,QAAQC,IAAIC,KAAKd,MAAMQ,OACvBM,KAAKC,SAAS,CAAEP,OAAUM,KAAKd,MAAMQ,QACrCM,KAAKL,OAAO,I,EAGhBO,OAAA,WAAU,IAAD,OACL,OACI,gCACI,kBAAC,IAAD,KACX,0BAAMC,UAAWC,IAAOC,YAEb,uBAAGC,GAAIF,IAAOG,OAAd,UACYP,KAAKd,MAAME,QADvB,MACmCY,KAAKd,MAAMC,OAE9C,4BAAQqB,KAAK,SAASL,UAAWC,IAAOK,KAAMC,QAASV,KAAKH,YAA5D,aAGA,uBAAGS,GAAIF,IAAOX,KACTO,KAAKd,MAAMO,KAEhB,wBAAIa,GAAIF,IAAOb,QACVS,KAAKd,MAAMK,QAEhB,yBAAKe,GAAG,WACJ,yBAAKH,UAAWC,IAAOO,OAAQD,QAAS,kBAAM,EAAKf,MAAM,KACpDK,KAAKd,MAAMM,QAAQ,IAExB,yBAAKW,UAAWC,IAAOO,OAAQD,QAAS,kBAAM,EAAKf,MAAM,KACpDK,KAAKd,MAAMM,QAAQ,IAExB,yBAAKW,UAAWC,IAAOO,OAAQD,QAAS,kBAAM,EAAKf,MAAM,KACpDK,KAAKd,MAAMM,QAAQ,IAExB,yBAAKW,UAAWC,IAAOO,OAAQD,QAAS,kBAAM,EAAKf,MAAM,KACpDK,KAAKd,MAAMM,QAAQ,O,EAOxCoB,kBAAA,WACIZ,KAAKL,OAAO,I,EAGhBA,MAAA,SAAMgB,GACFb,QAAQC,IAAI,SAAWY,EAAS,MAAQX,KAAKd,MAAMI,UACnC,IAAZqB,EACAX,KAAKC,SAAS,CACVR,IAAM,oCAEHkB,IAAWX,KAAKd,MAAMI,QAC7BU,KAAKC,SAAS,CACVR,IAAM,iBACNL,QAAUY,KAAKd,MAAME,QAAU,IAGnCY,KAAKC,SAAS,CACVR,IAAM,iBAId,IAEIoB,EAAMC,EAgBNhC,EAlBAiC,EAAOf,KAAKjB,MAAMiC,EAAKhB,KAAKjB,MAAMC,SAmBtC,IAlBAc,QAAQC,IAAIgB,GAERf,KAAKd,MAAMQ,OACXmB,EAAOE,EAAKE,IACZH,EAAMC,EAAKG,MAEXL,EAAOE,EAAKG,IACZJ,EAAMC,EAAKE,KAEfnB,QAAQC,IAAIc,GACZb,KAAKC,SAAS,CACVd,MAAQa,KAAKd,MAAMC,MAAQ,EAC3BG,QAASU,KAAKd,MAAMG,UACpBA,UAAY2B,EAAK,GACjBzB,OAASsB,IAIR/B,EAAI,EAAGA,EAAI,EAAGA,IACXkB,KAAKd,MAAMG,YAAcP,EACzBkB,KAAKd,MAAMM,QAAQV,GAAKgC,GAExBC,EAAOf,KAAKjB,MAAMiC,EAAKhB,KAAKjB,MAAMC,SAC9BgB,KAAKd,MAAMQ,MACXM,KAAKd,MAAMM,QAAQV,GAAKiC,EAAKG,IAE7BlB,KAAKd,MAAMM,QAAQV,GAAKiC,EAAKE,M,GAnH9BE,aA0HnB,SAASH,EAAKI,GACV,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAGlCxC,a","file":"component---src-pages-game-index-js-0147565042d45018d25d.js","sourcesContent":["import React, { Component} from \"react\"\nimport Helmet from 'react-helmet'\nimport styles from \"../../components/flashcards-game-container.module.css\"\n\nlet data = require('../../data/Cards.json')\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.words = [];\n        let i;\n        for (i=0; i < data.length; i++) {\n            this.words.push(data[i]);\n        }\n        \n        \n        this.state = {\n            count : -1,\n            correct : 0,\n            answerpos : 0,\n            lastpos : 0,\n            target : \"\",\n            choices : [\"1\",\"2\",\"3\",\"4\"],\n            msg : \"\",\n            isRus : true\n        } \n        this.chose = this.chose.bind(this);\n        this.switchLang = this.switchLang.bind(this);\n    }\n\n    switchLang() {\n        console.log(\"meow\")\n        console.log(this.state.isRus)\n        this.setState({ isRus : ! this.state.isRus})\n        this.chose(-1);\n    }\n\n    render() {\n        return (\n            <center>\n                <Helmet>\n\t\t\t\t\t<body className={styles.flashbod} />\n\t\t\t\t</Helmet>\n                <p id={styles.score}>\n                    Score: {this.state.correct} / {this.state.count}\n                </p>\n                <button type=\"button\" className={styles.flip} onClick={this.switchLang}>\n                    рус - анг\n                </button>\n                <p id={styles.msg}>\n                    {this.state.msg}\n                </p>\n                <h2 id={styles.target}>\n                    {this.state.target}\n                </h2>\n                <div id=\"choices\">\n                    <div className={styles.choice} onClick={() => this.chose(0)}>\n                        {this.state.choices[0]}\n                    </div>\n                    <div className={styles.choice} onClick={() => this.chose(1)}>\n                        {this.state.choices[1]}\n                    </div>\n                    <div className={styles.choice} onClick={() => this.chose(2)}>\n                        {this.state.choices[2]}\n                    </div>\n                    <div className={styles.choice} onClick={() => this.chose(3)}>\n                        {this.state.choices[3]}\n                    </div>\n                </div>\n            </center>\n        );\n    }\n    \n    componentDidMount() {\n        this.chose(-1);\n    }\n\n    chose(choice) {\n        console.log(\"choice\" + choice + \"ans\" + this.state.lastpos)\n        if (choice === -1) {\n            this.setState({\n                msg : \"выберите правильное определение\"\n            });\n        } else if (choice === this.state.lastpos) {\n            this.setState({\n                msg : \"ура правильно!\", \n                correct : this.state.correct + 1\n            });\n        } else {\n            this.setState({\n                msg : \"неправильно!\"\n            });\n        }\n        \n        let card = this.words[rand(this.words.length)];\n        console.log(card)\n        let targ, ans;\n        if (this.state.isRus) {\n            targ = card.rus;\n            ans = card.eng;\n        } else {\n            targ = card.eng;\n            ans = card.rus;\n        }\n        console.log(targ);\n        this.setState({\n            count : this.state.count + 1,\n            lastpos: this.state.answerpos,\n            answerpos : rand(4),\n            target : targ\n        });\n\n        let i;\n        for (i = 0; i < 4; i++) {\n            if (this.state.answerpos === i) {\n                this.state.choices[i] = ans;\n            } else {\n                card = this.words[rand(this.words.length)];\n                if (this.state.isRus) {\n                    this.state.choices[i] = card.eng;\n                } else {\n                    this.state.choices[i] = card.rus;\n                }\n            }\n        }\n    }\n}\n\nfunction rand(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default Game;"],"sourceRoot":""}